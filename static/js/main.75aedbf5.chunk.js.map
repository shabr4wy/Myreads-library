{"version":3,"sources":["Book.js","CurrentlyReading.js","Read.js","WantsToRead.js","BooksLibrary.js","BooksAPI.js","SearchBooks.js","App.js","index.js"],"names":["Book","book","updateBooksLibrary","useState","selectedShelf","setSelectedShelf","className","imageLinks","src","imageUrlInArray","smallThumbnail","split","splice","join","convertHttpToHttps","alt","title","width","height","undefined","value","shelf","onChange","e","hanndleChange","target","disabled","authors","CurrentlyReading","booksFromServer","map","id","Read","WantsToRead","BooksLibrary","to","api","token","localStorage","Math","random","toString","substr","headers","Accept","Authorization","search","query","maxResults","fetch","method","body","JSON","stringify","then","res","json","data","books","SearchBooks","setquery","searchResults","setSearchResults","useEffect","a","bookAPI","type","placeholder","error","searchedBook","forEach","App","setBooksFromServer","getAll","changedOrAddedBook","updatedBooks","filter","exact","path","element","ReactDOM","render","document","getElementById"],"mappings":"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","file":"static/js/main.75aedbf5.chunk.js","sourcesContent":["import { useState } from \"react\";\n\nconst Book = ({book, updateBooksLibrary}) => {\n\n\n    const [selectedShelf, setSelectedShelf] = useState('moveTo')\n    const hanndleChange = (selectedShelf) => {\n        setSelectedShelf(selectedShelf);\n        updateBooksLibrary(selectedShelf, book)\n    }\n\n    // creating an array to push the 's' after 'http' of the image\n    function convertHttpToHttps() {\n        const imageUrlInArray  = book.imageLinks.smallThumbnail.split('');\n\n        // check first if the Url served in Https or not\n        if(imageUrlInArray[4] !== 's'){\n            imageUrlInArray.splice(4,0,'s');\n            const imageUrlInString = imageUrlInArray.join('');\n            return imageUrlInString\n        }else{\n            return book.imageLinks.smallThumbnail;\n        }\n    }\n\n    return (\n        <div className=\"book\">\n            <div className=\"book-top\">\n                <div className=\"book-cover\">\n                    {\n                        book.imageLinks ?\n                            <img src={convertHttpToHttps()}\n                                 alt={book.title}\n                                 width=\"128\"\n                                 height=\"192\"\n                            />\n                        : undefined\n                    }\n                </div>\n                <div className=\"book-shelf-changer\">\n                <select\n                        value={book.shelf ? book.shelf : selectedShelf}\n                        onChange={e => hanndleChange(e.target.value)}\n                    >\n                    <option value=\"moveTo\" disabled>\n                    Move to...\n                    </option>\n                    <option value=\"currentlyReading\">\n                    Currently Reading\n                    </option>\n                    <option value=\"wantToRead\">Want to Read</option>\n                    <option value=\"read\">Read</option>\n                    <option value=\"none\">None</option>\n                </select>\n                </div>\n            </div>\n            <div className=\"book-title\">\n                {book.title}\n            </div>\n            <div className=\"book-authors\">{book.authors}</div>\n        </div>\n    )\n}\n\nexport default Book;","import Book from \"./Book\";\n\nconst CurrentlyReading = ({booksFromServer, updateBooksLibrary}) => {\n    \n    return (\n        <div className=\"bookshelf\">\n            <h2 className=\"bookshelf-title\">Currently Reading</h2>\n            <div className=\"bookshelf-books\">\n            <ol className=\"books-grid\">\n                {\n                    booksFromServer.map((book)=> (\n                        book.shelf === 'currentlyReading' &&\n                        <li key={book.id} >\n                            <Book book={book}\n                                  updateBooksLibrary={updateBooksLibrary}\n                            />\n                        </li>\n                    ))\n                }\n            </ol>\n            </div>\n        </div>\n    )\n}\n\nexport default CurrentlyReading;","import Book from \"./Book\";\n\nconst Read = ({booksFromServer, updateBooksLibrary}) => {\n    \n    return (\n        <div className=\"bookshelf\">\n            <h2 className=\"bookshelf-title\">Read</h2>\n            <div className=\"bookshelf-books\">\n            <ol className=\"books-grid\">\n                {\n                    booksFromServer.map((book)=> (\n                        book.shelf === 'read' &&\n                        <li key={book.id} >\n                            <Book book={book}\n                                  updateBooksLibrary={updateBooksLibrary}\n                            />\n                        </li>\n                    ))\n                }\n                </ol>\n            </div>\n        </div>\n    )\n}\n\nexport default Read;","import Book from \"./Book\";\n\nconst WantsToRead = ({booksFromServer, updateBooksLibrary}) => {\n\n    return (\n        <div className=\"bookshelf\">\n            <h2 className=\"bookshelf-title\">Wants To Read</h2>\n            <div className=\"bookshelf-books\">\n            <ol className=\"books-grid\">\n                {\n                    booksFromServer.map((book)=> (\n                        book.shelf === 'wantToRead' &&\n                        <li key={book.id} >\n                            <Book book={book}\n                                  updateBooksLibrary={updateBooksLibrary}\n                            />\n                        </li>\n                    ))\n                }\n                </ol>\n            </div>\n        </div>\n    ) \n}\n\nexport default WantsToRead;","import CurrentlyReading from \"./CurrentlyReading\";\nimport Read from \"./Read\";\nimport WantsToRead from \"./WantsToRead\";\nimport { Link } from \"react-router-dom\";\n\nconst BooksLibrary = ({booksFromServer, updateBooksLibrary}) => {\n    return (\n        <div className=\"list-books\">\n            <div className=\"list-books-title\">\n                <h1>MyReads</h1>\n            </div>\n            <div className=\"list-books-content\">\n                <CurrentlyReading booksFromServer={booksFromServer} updateBooksLibrary={updateBooksLibrary}/>\n                <WantsToRead booksFromServer={booksFromServer} updateBooksLibrary={updateBooksLibrary}/>\n                <Read booksFromServer={booksFromServer} updateBooksLibrary={updateBooksLibrary}/>\n            </div>\n            <div className=\"open-search\">\n                <Link to=\"/searchPage\">\n                    add\n                </Link>\n            </div>\n        </div>\n    )\n}\n\nexport default BooksLibrary;","const api = \"https://reactnd-books-api.udacity.com\";\n\nlet token = localStorage.token;\n\nif (!token) token = localStorage.token = Math.random().toString(36).substr(-8);\n\nconst headers = {\n  Accept: \"application/json\",\n  Authorization: token,\n};\n\nexport const get = (bookId) =>\n  fetch(`${api}/books/${bookId}`, { headers })\n    .then((res) => res.json())\n    .then((data) => data.book);\n\nexport const getAll = () =>\n  fetch(`${api}/books`, { headers })\n    .then((res) => res.json())\n    .then((data) => data.books);\n\nexport const update = (book, shelf) =>\n  fetch(`${api}/books/${book.id}`, {\n    method: \"PUT\",\n    headers: {\n      ...headers,\n      \"Content-Type\": \"application/json\",\n    },\n    body: JSON.stringify({ shelf }),\n  }).then((res) => res.json());\n\nexport const search = (query, maxResults) =>\n  fetch(`${api}/search`, {\n    method: \"POST\",\n    headers: {\n      ...headers,\n      \"Content-Type\": \"application/json\",\n    },\n    body: JSON.stringify({ query, maxResults }),\n  })\n    .then((res) => res.json())\n    .then((data) => data.books);\n","import {useState, useEffect} from 'react'\nimport Book from './Book';\nimport * as bookAPI from './BooksAPI'\nimport { Link } from 'react-router-dom';\n\nconst SearchBooks = ({booksFromServer, updateBooksLibrary})=> {\n\n  const [query, setquery] = useState('');\n  const [searchResults, setSearchResults] = useState([]);\n\n  // search the query\n  useEffect(() => {\n    if (query) {\n      const search = async () => {\n        const res = await bookAPI.search(query, 10);\n        setSearchResults(res);\n      }\n      search();\n    }else {setSearchResults([])}\n  }, [query]);\n\n\n  const checkIfSearchedBookExistsOnTheMainPage = (searchedBook) => {\n    booksFromServer.forEach((book) => {\n      if (searchedBook.id === book.id){\n        searchedBook.shelf = book.shelf;\n      }\n    })\n  }\n\n\n  return (\n    <div className=\"search-books\">\n      <div className=\"search-books-bar\">\n        <Link to=\"/\" className=\"close-search\">\n          close\n        </Link>\n        <div className=\"search-books-input-wrapper\">\n          <input\n            type=\"text\"\n            placeholder=\"Search by title, author, or ISBN\"\n            value={query}\n            onChange={(e) => setquery(e.target.value)}\n          />\n        </div>\n      </div>\n      <div className=\"search-books-results\">\n      <ol className=\"books-grid\">\n        {\n            !searchResults.error ? searchResults.map((book)=> {\n              checkIfSearchedBookExistsOnTheMainPage(book)\n              return(\n                <li key={book.id}>\n                  <Book book={book}\n                        updateBooksLibrary={updateBooksLibrary}\n                  />\n                </li>\n              )\n            }) : <p> not found </p>\n        }\n      </ol>\n      </div>\n    </div>\n  ) \n  \n}\n\nexport default SearchBooks;\n","import \"./App.css\";\nimport BooksLibrary from \"./BooksLibrary\";\nimport SearchBooks from \"./SearchBooks\";\nimport { useState, useEffect } from \"react\";\nimport * as BooksAPI from \"./BooksAPI\";\nimport { Route, Routes } from \"react-router-dom\";\n\nfunction App() {\n  const [booksFromServer, setBooksFromServer] = useState([]);\n\n  // getting books from the backend\n  useEffect(() => {\n    const getAll = async () => {\n      const res = await BooksAPI.getAll();\n      setBooksFromServer([...res]);\n    };\n    getAll();\n  }, []);\n\n  // the name 'changedOrAddedBook' means if the action was taken on BooksLibrary page,\n  // then the book shelf will be changed.\n  // if the action was taken on searchBooks page,\n  // then it's added to the server and BooksLibrrary.\n  const updateBooksLibrary = (selectedShelf, changedOrAddedBook) => {\n    // updating server with the new book\n    BooksAPI.update(changedOrAddedBook, selectedShelf);\n\n    // removing the book form its old shelf\n    const updatedBooks = booksFromServer.filter(\n      (book) => changedOrAddedBook.id !== book.id\n    );\n\n    // adding the book on its new shelf\n    changedOrAddedBook.shelf = selectedShelf;\n    setBooksFromServer([...updatedBooks, changedOrAddedBook]);\n  };\n\n  return (\n    <Routes>\n      <Route\n        exact\n        path=\"/Myreads-library\"\n        element={\n          <BooksLibrary\n            booksFromServer={booksFromServer}\n            updateBooksLibrary={updateBooksLibrary}\n          />\n        }\n      />\n      <Route\n        path=\"/searchPage\"\n        element={\n          <SearchBooks\n            booksFromServer={booksFromServer}\n            updateBooksLibrary={updateBooksLibrary}\n          />\n        }\n      />\n    </Routes>\n  );\n}\nexport default App;\n","import React from \"react\";\nimport ReactDOM from \"react-dom\";\nimport \"./index.css\";\nimport App from \"./App\";\nimport {BrowserRouter} from 'react-router-dom'\n\nReactDOM.render(\n  <BrowserRouter>\n    <App />\n  </BrowserRouter>,\n  document.getElementById(\"root\")\n);\n"],"sourceRoot":""}